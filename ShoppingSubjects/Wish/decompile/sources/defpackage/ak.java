package defpackage;

import android.util.Base64;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

/* renamed from: ak reason: default package */
/* compiled from: GA */
public final class ak {
    private static final byte[] a = {47, 44, -115, -104, 82, -55, -81, -103, -56, -127, -50, 25, -24, -92, -5, -13, 86, -84, -85, -125, -61, 85, 83, -80, 91, 106, 4, -35, -88, 123, -15, -40, -48, 27, 121, 111, -41, 81, 44, 56, 75, 116, -70, 9, 60, 64, 75, 55, -125, 78, 8, -84, 117, -63, -59, -90, 120, -34, -12, 110, 31, -15, 19, 28, 9, 83, 67, 39, 58, 29, 80, 74, -90, -94, -98, -102, 114, 7, -122, -108, 89, -98, 14, 7, -58, 16, 51, -22, 14, -39, -15, 101, 85, 29, -6, -97, 126, 91, 99, 109, 123, -13, 25, 120, 97, 19, 25, 29, 1, 73, 1, -50, 38, -19, -24, 91, -124, 86, 12, -55, 37, 84, 13, 70, -17, -16, 44, 4, Byte.MIN_VALUE, -45, 86, 27, -55, 73, -116, 57, 51, 0, 43, 73, 56, 54, -55, 77, 8, 31, 95, -15, -22, 31, -35, 79, 38, -39, -75, -67, 117, -104, -71, 14, Byte.MIN_VALUE, 95, -123, -100, 88, 111, -113, 38, 101, 85, -103, -113, 66, 32, -116, -64, -123, -52, -87, 125, 56, 117, -93, 41, -82, 69, 110, -38, -27, 93, -87, 21, -46, 123, 66, -17, -124, -14, -77, -36, -78, 110, -120, 52, -63, Byte.MIN_VALUE, -103, 85, -113, -67, 33, 79, 88, -20, 32, -111, 43, 100, 101, -98, 124, 111, 36, -11, -28, 94, 57, 94, -82, -76, 88, 71, -6, -57, -124, -124, -26, 48, 32, -52, -21, 58, 95, 13, -45, 64, 75, 16, -23, -94, 70, 63, -37, -101, -36, -77, 40, 119, 47, 82, 87, 95, 15, -43, 48, 71, 97, -81, -73, 36, -31, 102, -2, -44, 19, 20, Byte.MIN_VALUE, 44, 17, 23, -49, 111, 25, 111, -68, 69, 87, -26, 102, 102, 79, 123, -42, 93, -101, 41, -56, 75, -72, 27, 63, -48, -107, -60, -95, -5, 40, 47, 50, 18, -105, 122, 1, -115, -84, -39, -76, 112, 108, -50, -20, 93, -54, 72, Byte.MAX_VALUE, -109, 119, -54, -54, -122, 83, -95, -56, 87, 46, -10, 76, -107, 27, -28, -123, 45, 43, -64, 79, 19, 16, 47, -94, 91, 23, 18, -114, 27, 50, 93, -113, -34, -76, -26, -105, -62, 3, -103, 2, 121, 41, 76, -21, 98, 17, -95, 68, -119, 101, 98, -59, 55, -79, 10, 52, -32, 15, -94, 86, -92, -23, 107, 79, -47, 10, -102, 121, -126, 15, 81, -14, -48, 12, -36, 105, -34, 4, -23, 80, 111, 105, 11, -98, 0, 57, -69, -64, -23, -67, -28, 31, -4, -41, -69, -106, -59, 14, -92, -65, -59, -44, -63, 106, -73, 27, 54, -119, 60, 60, 60, 54, -44, -104, 105, -89, 112, 74, 81, 4, 16, 25, -35, 94, 24, -77, 61, 80, 100, 92, -23, -18, -53, -61, 119, 14, 44, 1, 72, 55, 25, 35, -66, -48, 0, -43, -97, 65, -77, 61, 77, -124, 119, 100, -99};
    private static final byte[] b = {-79, -99, 58, -94, 105, -61, -84, 120, 92, -89, 124, -126, 64, -76, 30, 21, 68, -125, -46, -120, -110, 30, 102, 72, 118, 105, 16, 106, -86, 125, -54, 100, -110, 59, -40, 60, -14, 87, 125, -35, -120, 28, 43, -86, -23, -114, -14, -88, -48, -121, -8, 23, 99, 23, -46, 124, -22, -68, 43, -10, -114, 65, -67, 92, 26, 35, -24, 125, -72, -51, 73, -112, -5, -6, -4, -79, 38, -45, 84, 22, 73, -117, 27, 32, 114, 3, 125, 11, 52, -27, -11, 118, 19, 17, 10, -95, 23, 62, 113, -28, 89, 103, 112, 21, 108, 63, 9, -30, -7, -46, 61, 63, 16, -18, 31, 88, -57, -115, -1, 45, 85, -112, -112, Byte.MAX_VALUE, -114, -83, -27, -84, -40, 124, -49, 62, 30, 30, 20, -104, 59, 52, -96, -37, -78, 5, 54, 52, 110, -67, -22, 109, -11, 28, 84, -127, -93, 48, 49, -112, 34, 68, 0, -90, -115, -117, -93, -35, 26, -101, -75, 11, -16, -97, 13, 10, 3, 5, -64, -53, 107, 20, -31, 29, -108, 29, -5, -114, 82, 44, -111, -89, -124, 77, Byte.MIN_VALUE, -37, 60, 33, 63, 6, 113, 97, -23, 77, 92, 88, -121, 92, -124, -49, 59, 88, 71, 36, -119, 39, -65, 57, 86, -44, -30, 10, -36, 28, 79, 84, 42, 53, 98, 53, 44, 108, -110, -24, 112, 59, 123, 37, -123, -17, 27, 80, -34, -24, -100, -66, 43, -118, -90, -117, -5, -19, -8, 35, 34, -32, -120, 102, 40, -12, -77, -109, 72, -87, 10, 29, -104, 66, -59, -124, 75, -27, -118, 17, 30, -49, -85, -35, 20, 86, -47, 23, -85, -115, -111, -99, 21, 112, 50, -19, 34, 47, 24, 118, 61, -27, 118, 67, 40, -26, -101, 56, -34, -12, 44, 126, 108, -106, 61, -43, -95, -59, 43, -9, -114, 119, -103, 80, 66, 42, 45, -85, 124, 56, -56, 30, -10, 71, -86, 62, 76, 19, 102, -127, -56, 6, 30, -92, 7, 60, 66, 60, -4, 76, 80, -62, 107, -3, -37, -115, -10, -97, -71, 4, -99, 73, -9, 63, 66, -111, 9, -49, -72, 74, 29, 75, 71, -45, 105, 98, -19, -94, 97, -33, -93, 36, -127, 58, -1, -108, 7, 47, 3, 79, -14, -48, -125, -82, -20, 15, 27, -49, -47, 70, -93, 39, -116, 67, -45, 6, 10, 111, -103, -7, 32, 104, 110, 67, -75, 108, -39, -29, -11, 85, 52, -10, 105, 88, -16, 92, -81, -44, 24, 109, 22, 57, 72, -42, -24, 97, -56, 68, 77, 52, 20, -77, -106, -61, 111, 29, 13, 44, 80, 41, -53, 94, -42, -55, 56, -17, -25, 70, -69, -66, 64, 123, 81, 46, 32, 63, 22, 48, 49, -79, -126, -1, 86, -111, 56, 79, -39, -114, -116, 75, 113, 29, -39, 57, -71, -27, 118, 65, 124, -49};
    private static byte[] c = {114, -122, 70, Byte.MAX_VALUE, -11, 40, -11, -37, -49, 26, -40, -47, -19, 9, -127, 94};
    private static SecretKey d = D();

    public static String a() {
        return a(new byte[]{-101, -77, -55, 0, -11, -103, -20, 120, Byte.MAX_VALUE, 68, -76, -52, -111, -19, -115, 39}, d);
    }

    public static String b() {
        return a(new byte[]{-20, 86, -114, -122, 22, -21, -105, 48, -31, 36, 11, -44, -68, -12, 52, 47}, d);
    }

    public static String c() {
        return a(new byte[]{-68, 86, 32, -52, 122, 55, -50, 55, 96, 70, 24, 46, 27, 104, 22, -119}, d);
    }

    public static String d() {
        return a(new byte[]{43, 56, -118, -16, -106, -59, -122, 24, -32, -40, 113, -40, -52, 6, -54, 74}, d);
    }

    public static String e() {
        return a(new byte[]{51, -104, -96, -122, -62, 73, -104, 28, 16, 70, 46, -108, -85, 13, 49, -118}, d);
    }

    public static String f() {
        return a(new byte[]{126, -76, -46, Byte.MAX_VALUE, -58, 96, -72, 69, 27, -98, 40, 8, -48, 48, -120, -33, 49, -37, 73, -71, 109, -43, 119, 79, 117, -80, 116, 27, -80, -82, -56, -90, -74, 125, 112, -49, -98, 39, 50, 99, 69, -24, -121, -53, 124, 108, -30, 45}, d);
    }

    public static String g() {
        return a(new byte[]{-50, 74, 94, -75, -83, 2, 16, 20, -80, 96, -9, 72, -19, -75, -64, 96, 90, 55, -122, 89, -5, 116, 47, -104, 23, 36, 30, 125, -41, 89, -9, -61}, d);
    }

    public static String h() {
        return a(new byte[]{-101, -10, -92, -106, 7, -86, 63, -41, 25, 50, -71, -31, -122, 111, -33, 103, 13, 74, 54, -105, 23, 119, 71, -100, -16, -121, -4, -123, 116, Byte.MAX_VALUE, -108, -103}, d);
    }

    public static String i() {
        return a(new byte[]{119, -127, -30, -24, 58, -114, -115, -17, 1, -95, -84, 101, 11, -96, -122, -113, 47, -59, -17, -34, 46, 108, 43, 17, 23, 106, -98, 126, 35, 23, 71, -55, 72, -12, 66, -123, 118, -108, 68, 123, 44, 116, 40, 34, -107, 81, -95, -74, 113, 16, 100, 51, -107, 0, -87, -42, 120, 89, 17, -115, 116, 77, 88, 124}, d);
    }

    public static String j() {
        return a(new byte[]{19, 52, -35, -40, 28, -59, 60, 0, 92, -101, -123, 48, -15, 56, -105, 36, 56, -41, -50, 109, -27, -62, 101, -94, 99, 36, -54, -26, 109, -1, 44, -8}, d);
    }

    public static String k() {
        return a(new byte[]{-13, 83, 57, -98, 7, -111, -63, 102, -2, 20, 66, -54, 90, 69, -17, -28}, d);
    }

    public static String l() {
        return a(new byte[]{-98, -78, -5, -104, 47, -31, 31, 24, -10, -54, -100, 61, -16, 103, 23, -5}, d);
    }

    public static String m() {
        return a(new byte[]{-113, -35, 50, 10, -48, 29, 94, -56, 23, 68, 93, -11, -72, -122, 71, 98}, d);
    }

    public static String n() {
        return a(new byte[]{-51, -127, -92, -34, -120, -52, -29, -30, -126, 48, Byte.MAX_VALUE, -13, 45, -85, 96, 119}, d);
    }

    public static String o() {
        return a(new byte[]{32, -41, 89, -71, -27, 103, 118, 33, 96, -21, -21, -114, 31, -82, -122, 95}, d);
    }

    public static String p() {
        return a(new byte[]{-48, 36, 4, 23, 126, 82, -68, 63, -82, -83, 53, -118, -106, Byte.MIN_VALUE, 91, -25}, d);
    }

    public static String q() {
        return a(new byte[]{52, -87, 86, -11, 39, -6, -84, 93, -26, -64, -102, -69, 66, -47, -84, 103}, d);
    }

    public static String r() {
        return a(new byte[]{33, -20, -109, 12, -56, -27, 58, -18, -60, -63, -36, -61, -22, 102, -22, -13}, d);
    }

    public static String s() {
        return a(new byte[]{-49, -36, 8, 87, 84, 49, 11, 38, 73, -99, -83, 114, -62, 44, 85, 62}, d);
    }

    public static String[] t() {
        return a(new byte[]{-85, 116, 8, -117, -120, -112, -47, -125, -111, -39, Byte.MAX_VALUE, -23, 27, 52, 99, 76, -78, 27, 48, -2, -115, -20, 99, 57, 97, -109, -17, -83, -82, 122, -35, 42, -74, -77, -80, -109, -72, -63, 80, 92, 101, 29, 14, 118, 22, -3, 106, 0, -8, 90, 122, 68, -58, -121, -34, 38, 93, -4, -7, 10, -113, -69, 74, 96, 97, 123, 73, 65, -33, -92, -71, -36, 49, 15, 125, 57, 71, 78, 125, 37, -103, 122, 91, -81, 57, 107, -88, 100, 63, 6, -59, 93, -120, -70, 36, -23, -79, 28, -17, -115, -29, -79, -74, -112, -115, -35, -9, -9, -27, 105, 80, -96}, d).split("~~~");
    }

    public static String[] u() {
        return a(new byte[]{97, 91, -45, 89, 77, -57, 124, -32, -5, 121, -83, 61, -51, -78, -104, -28, -27, -51, 12, -18, -104, 30, -34, -113, -101, -6, 92, -83, 2, 42, 8, 120, -8, -67, 58, -2, 52, 53, 5, -4, -29, -78, -125, -100, -73, 54, -76, -90, -42, -105, -52, 32, 95, 15, 34, 11, 47, -119, 64, 43, -43, 76, 8, -91, -83, 66, -121, -42, 97, -61, 89, 90, -56, 98, 59, 4, -124, 85, 109, -8, 66, -12, -25, 80, -91, -126, 55, 111, 85, -125, 116, -19, 104, -52, -27, 93}, d).split("~~~");
    }

    public static String[] v() {
        return a(new byte[]{-75, -49, 121, 11, -18, -114, -94, -5, 111, -81, 65, -42, -109, -79, 44, 46, -19, 49, -21, -125, 119, -12, -79, 87, -114, -51, 63, 13, 125, -111, -50, 94, 120, 106, 4, -14, 117, 80, -114, 116, -32, 9, 97, 87, 121, -33, -78, 66, 43, 22, 2, -42, -44, -43, -27, 115, -68, 123, 68, -123, -89, 114, 22, 18, -71, -8, -94, -57, -27, -91, -12, -70, 54, -85, -79, -25, -11, 83, 13, 29, 53, 103, 84, 76, -76, 4, 93, 71, -63, 55, -25, -5, -50, 88, -34, -20, -69, -87, 22, 72, 34, 46, 103, 100, -2, -122, 18, -58, -18, 9, 54, 111}, d).split("~~~");
    }

    public static String[] w() {
        return a(new byte[]{17, 8, -71, 92, 93, -38, -72, 92, -74, 33, -75, 46, -62, -121, -127, 56, 79, 87, -100, 59, -10, 104, -20, -43, 85, -95, 67, 112, 49, 31, 49, 46, -72, -105, 84, 49, -127, 62, -80, -127, 122, 97, -78, -15, 120, 70, -121, 89, -26, 69, 91, -6, -21, 80, Byte.MAX_VALUE, 59, 115, 48, 9, -97, -107, 79, -63, -103, -26, 54, -109, 69, 44, 116, -107, -8, -109, 93, 5, -96, 96, 60, -79, -78}, d).split("~~~");
    }

    public static String[] x() {
        return a(new byte[]{27, 18, -98, -39, -123, 63, 99, 27, -96, 34, -56, -96, 9, -47, -14, -114, -73, -8, 32, 7, 3, 83, -66, 72, -68, -31, -72, -37, -63, -71, 118, 126, 72, 23, -107, -125, 57, 98, -16, -30, -70, -22, 70, 99, -75, 27, 35, -97, -106, 73, -69, -51, -13, -28, 72, 14, -36, -34, -24, 110, 34, 9, 91, 27, Byte.MAX_VALUE, -75, 69, -28, 100, -44, 50, -104, 49, -104, -32, -32, -62, 22, -37, 44, 97, -60, -85, -70, -118, 125, 37, 4, 3, -44, 125, 47, 13, -48, -73, 87, 21, 9, -120, -49, -71, 86, -123, 42, -17, 65, -44, -90, -17, 95, -102, -70, 89, 124, 27, 98, 85, 19, 1, 2, -45, 118, 116, -108, 21, 112, 110, 34, 17, -6, 77, -88, -118, -125, 64, -18, -25, -19, -102, 120, 76, 106, -109, -100, 92, 109, 98, 22, -30, 24, -64, -32, -65, -100, -61, 67, -75, 89, 79, -79, -28, -101, -98, -56, -25, 20, -59, 46, 58, -48, -90, 39, -70, -57, -2, -81, Byte.MAX_VALUE, -114, 96, 21, 105, 102, -110, -89, -63, -75, -127, 59, -98, 105, -5, 116, -93, -82, -22, 71, -65, 82, 33, -69, -42, -95, 37, -29, 50, -57, 101, 124, -95, 63, -41, 45, -61, -91, -1, -3, 101, -71, -27, 18, 115, 80, -62, 56, -69, 94, 124, -41, 41, 98, -16, -11, -26, -113, -77, -56, -37, -74, 5, -50, -36, -87, -49, -87, 118, -109, -55, -85, -9, -25, 93, 51, -13, -123, -68, -2, -1, -58, -55, 83, 26, 103, 89, 62, 104, -83, 47, -28, -109, -60, -90, -116, -111, -6, -45, 123, -107, -119, 44, -66, -67, -66, 117, 53, 90, -46, -36, 95, -24, 1, 39, -48, -71, -108, -114, -3, 5, -114, -44, 47, -119, -96, 25, 110, 31, 60, -80, -62, 10, -98, -28, -127, 93, 86, 21, 125, 18, -51, -41, 61, -127, -6, -84, 72, -70, 4, -88, -78, 12, 62, -82, 72, Byte.MAX_VALUE, 58, -5, 125, -101, -101, -24, 47, 124, -120, 108, -70, -35, -62, 30, -111, 80, -107, 86, -109, -74, 52, 20, -68, 121, -102, -59, -87, 98, -92, 83, -43, 110, Byte.MAX_VALUE, 87, -74, -38, -65, -118, -53, -114, 8, 93, -101, 23, 113, 50, 75, 34, -119, -108, -87, 94, 8, 9, 48, -107, -90, -82, 6, -43, 25, -100, 54, 100, 44, -18, -31, 9, 65, -66, -59, -31, -66, -87, 39, 27, -16, -56, 38, 1, 36, -1, 125, 53, 40, -66, 52, 67, -53, 11, -2, 57, -35, -99, 79, -44, -73, -41, 55, 46, 6, -71, 112, -40, 118, 68, 3, -28, 27, 116, -36, Byte.MIN_VALUE, -37, -99, -69, 56, -24, 39, 126, 12, -96, -26, -88, -97, -110, -123, -67, -97, 18, -120, -35, -46, -14, -111, 88, -18, 27, -14, 78, -120, 119, -87, -99, -30, 0, 7, -29, -125, -13, -103, 116, 9, 50, 111, 28, 112, 36, -104, -95, -16, -11, -109, -98, 42, 22, -94, 88, -72, 113, 66, -126, 8, -103, -27, 5, 37, -52, -31, 36, -80, 90, 59, -127, 15, -48, -47, -110, 67, 114, 8, -123, -55, 49, 32, -35, -80, 123, 47, -60, 102, 64, 75, -111, 41, 40, -21, 104, 33, -28, 125, -80, -45, -65, -60, -98, 22, -50, -46, 106, 75, 10, -113, -86, -76, -15, -5, 52, -76, -16, 113, 18, -88, 68, 52, -94, -94, 72, -28, -6, -56, -70, -87, -117, -38, -80, 6, -32, -38, 110, -28, 100, 33, -79, -114, 84, 61, -25, 30, 17, 78, 24, -54, 89, 61, 121, -57, -90, 58, 10, -101, 41, -65, 84, -19, -98, -57, 44, -98, -17, 116, 119, -91, 25, -77, -9, -85, -68, 24, 43, 125, -109, 106, -89, -3, 61, 110, -9, 76, 38, 105, 53, -125, -68, 4, 124, 65, -13, -7, -7, -65, -21, -107, -2, -113, -62, 2, -122, -107, 118, -73, -79, -116, -38, 9, 56, 102, 96, -29, 101, -42, -33, -95, -54, -112, -98, 44, 108, 4, -73, -16, 13, -95, 94, 108, 78, 56, 69, -27, 27, -66, 54, 49, 65, -116, 1, -58, 122, -85, 64, 9, 41, 118, 95, 9, -74, -42, 84, -41, 73, 16, 22, -55, 102, 30, 101, 57, 2, 85, -73, -115, 104, 6, -106, 48, 118, -72, 101, 63, 8, -97, 58, Byte.MAX_VALUE, -91, 8, 67, -119, 3, 49, 81, 22, 19, -23, -6, 19, -30, 13, -99, -79, 44, -20, -97, 91, -83, 24, -55, -24, -80, -54, 91}, d).split("~~~");
    }

    public static String[] y() {
        return a(new byte[]{75, -18, 82, 32, 116, -74, 109, -27, -95, -116, 13, 125, -118, -77, 107, 113, -70, -62, -6, 17, 17, 25, 100, -67, 36, -88, -3, 69, -41, 55, 102, 64, 92, 38, -3, -102, 79, 113, -114, -92, 4, -85, 56, -14, -46, 110, 95, 66, -95, 97, -115, -52, 90, -42, -62, 119, 21, -94, 82, 122, -23, 117, -33, 39, -57, -94, 123, 84, -92, -2, -22, 47, -127, -82, -74, 46, 120, 84, 99, -123, 19, -38, -48, 89, -7, -111, 104, 70, 7, -86, 81, 77, -30, -87, -107, 122, 31, -40, -87, 3, -48, -33, -94, -68, 41, -4, 116, -19, 48, 56, -91, 92, -13, -120, 76, 105, 33, 117, 100, -95, -116, -121, 78, 68, -118, -59, -55, -115, -57, -101, -14, 24, 25, -50, -24, 99, -110, 125, 21, -62, -80, -63, 52, 68, 7, 89, 2, -64, -97, 56, 0, -102, -34, -36, 76, 121, 84, 65, 2, -55, 24, 97, -80, -7, -94, 92, -126, 19, -51, 99, -1, 100, 106, -71, -102, 91, 88, -75, 119, -2, -56, 78, 73, 43, 33, -67, 19, -37, -16, -55, -18, -81, -14, -45, 122, 19, 33, -86, -57, -37, -5, -38, -56, -57, 57, 54, 75, 32, -35, -71, -29, 121, -17, 103, -108, 33, -53, 65, 39, 23, 88, 42, -32, -100, 17, -125, 11, -56, -28, 9, -23, 42, -38, 52, -46, -88, 17, 1, -104, 102, 62, -59, -96, -23, 20, 10, 118, 81, -125, -12, -103, -55, -73, 90, 37, -33, -72, 2, -48, -37, 23, 83, -93, 26, Byte.MIN_VALUE, -29, -35, 17, 83, 81, -7, -119, -125, 37, -50, 25, -20, 71, -98, 59, 53, -22, 103, -20, 73, -34, 126, -88, -41, 20, 120, -122, 37, -111, 56, 83, -85, -67, 79, 14, -104, 124, -105, -123, -75, 0, 69, 66, -111, -9, -20, -22, -106, 110, 71, 101, -5, 63, 79, 102, -124, 69, -34, 68, -21, 88, -69, -107, 81, -19, 6, 88, -100, -104, -111, -84, -79, 119, 14, -113, 78, 32, 59, -123, 45, -119, 110, -73, 29, -15, 90, 109, -4, -27, -36, 114, 71, 2, -121, 78, 15, 30, 32, -8, 15, 50, 66, -93, 12, 117, -30, -67, -29, -66, 50, 23, 29, 31, -64, 13, 57, -127, 31, 81, -16, -15, -42, -110, -119, -102, -29, -87, -108, 5, -116, -29, -62, -28, -108, 46, 19, 73, 64, 106, -126, 105, -119, -46, 71, 3, 84, 111, 38, 93, 32, -14, 46, -39, 121, 96, -72, -105, 58, -46, 59, 11, 79, 0, 112, 75, 15, 28, -111, 37, -123, 111, 46, 47, -7, 51, -124, -93, 8, 73, -57, -52, -16, 22, 106, 26, 54, 124, 93, 115, 66, -29, -87, -45, -32, 22, -97, -13, 23, -16}, d).split("~~~");
    }

    public static String z() {
        return a(new byte[]{5, -9, 0, 1, 25, 78, -121, 98, Byte.MIN_VALUE, -75, 77, 117, 68, -91, -99, 23}, d);
    }

    public static String A() {
        return a(b, d);
    }

    public static String B() {
        return a(a, d);
    }

    public static String C() {
        return a(new byte[]{118, 52, -78, -44, 125, 0, 18, -114, -80, -46, -121, -2, 48, -31, 73, 56}, d);
    }

    private static SecretKey D() {
        try {
            int[] iArr = {368, 296, 179, 528, 3, 318, 564, 1, 292, 536, 439, 192, 633, 333, 40, 556, 325, 277, 16, 536, 275, 343, 40, 522, 41, 268, 577, 414, 72, 618, 307, 312, 45, 521, 307, 28, 567, 33, 256, 620, 21, 340, 526, 336, 357, 12, 552, 299, 408, 236, 554, 383, 278, 6, 559, 393, 2, 638, 414, 82, 596, 436, 138, 629, 439, 30, 604, 268};
            ByteBuffer allocate = ByteBuffer.allocate(48);
            IntBuffer allocate2 = IntBuffer.allocate(48);
            int i = 0;
            boolean z = true;
            for (int i2 = 0; i2 < 68; i2++) {
                if (iArr[i2] > 510) {
                    i++;
                    z = true;
                } else if (z) {
                    if (iArr[i2] > 255) {
                        allocate2.put((200 - iArr[i2]) + 255);
                    } else {
                        allocate2.put(iArr[i2] + 200);
                    }
                    z = false;
                } else if (iArr[i2] > 255) {
                    allocate2.put((allocate2.get((i2 - 1) - i) - iArr[i2]) + 255);
                } else {
                    allocate2.put(allocate2.get((i2 - 1) - i) + iArr[i2]);
                }
            }
            for (int valueOf : allocate2.array()) {
                allocate.put(Integer.valueOf(valueOf).byteValue());
            }
            return new SecretKeySpec(Arrays.copyOfRange(SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1").generateSecret(new PBEKeySpec(Base64.encodeToString(allocate.array(), 1).toCharArray(), new byte[]{97, -55, -80, 22, 33, -116, 52, 59, -104, -41, -39, 22, -32, -98, 61, -99, 42, 124, 31, -5, 10, -53, 61, -120, -85, 62, 73, -87, -6, -36, -22, -104}, 1024, 128)).getEncoded(), 0, 16), "AES");
        } catch (Exception unused) {
            return null;
        }
    }

    private static String a(byte[] bArr, SecretKey secretKey) {
        if (!(bArr == null || secretKey == null)) {
            try {
                Cipher instance = Cipher.getInstance("AES/CBC/PKCS5Padding");
                instance.init(2, secretKey, new IvParameterSpec(c));
                return new String(instance.doFinal(bArr), "UTF-8");
            } catch (Exception unused) {
                al.a();
            }
        }
        return "";
    }
}
