package org.parceler;

import android.os.Parcelable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* compiled from: Parcels */
public final class d {
    private static final a a = new a();

    /* compiled from: Parcels */
    private static final class a {
        private ConcurrentMap<Class, b> a;

        private a() {
            this.a = new ConcurrentHashMap();
        }

        public b a(Class cls) {
            b bVar = (b) this.a.get(cls);
            if (bVar != null) {
                return bVar;
            }
            b b = b(cls);
            if (Parcelable.class.isAssignableFrom(cls)) {
                b = new s();
            }
            if (b == null) {
                StringBuilder sb = new StringBuilder();
                sb.append("Unable to find generated Parcelable class for ");
                sb.append(cls.getName());
                sb.append(", verify that your class is configured properly and that the Parcelable class ");
                sb.append(c(cls));
                sb.append(" is generated by Parceler.");
                throw new ParcelerRuntimeException(sb.toString());
            }
            b bVar2 = (b) this.a.putIfAbsent(cls, b);
            return bVar2 == null ? b : bVar2;
        }

        private static String c(Class cls) {
            StringBuilder sb = new StringBuilder();
            sb.append(cls.getName());
            sb.append("$$");
            sb.append("Parcelable");
            return sb.toString();
        }

        public b b(Class cls) {
            try {
                return new c(cls, Class.forName(c(cls)));
            } catch (ClassNotFoundException unused) {
                return null;
            }
        }

        public void a(e<b> eVar) {
            this.a.putAll(eVar.b());
        }
    }

    /* compiled from: Parcels */
    public interface b<T> {
        Parcelable a(T t);
    }

    /* compiled from: Parcels */
    private static final class c<T> implements b<T> {
        private final Constructor<? extends Parcelable> a;

        public c(Class<T> cls, Class<? extends Parcelable> cls2) {
            try {
                this.a = cls2.getConstructor(new Class[]{cls});
            } catch (NoSuchMethodException e) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", (Exception) e);
            }
        }

        public Parcelable a(T t) {
            try {
                return (Parcelable) this.a.newInstance(new Object[]{t});
            } catch (InstantiationException e) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", (Exception) e);
            } catch (IllegalAccessException e2) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", (Exception) e2);
            } catch (InvocationTargetException e3) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", (Exception) e3);
            }
        }
    }

    static {
        a.a((e<b>) NonParcelRepository.a());
    }

    public static <T> Parcelable a(T t) {
        if (t == null) {
            return null;
        }
        return a(t.getClass(), t);
    }

    public static <T> Parcelable a(Class<? extends T> cls, T t) {
        if (t == null) {
            return null;
        }
        return a.a((Class) cls).a(t);
    }

    public static <T> T a(Parcelable parcelable) {
        if (parcelable == null) {
            return null;
        }
        return ((c) parcelable).getParcel();
    }
}
